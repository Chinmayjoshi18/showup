rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'organizer'];
    }
    
    function hasValidBooking(eventId) {
      return exists(/databases/$(database)/documents/bookings/$(request.auth.uid + '_' + eventId));
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles
      allow read: if true;
      
      // Users can only create/update their own profile
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only admins/organizers can create/update/delete events
      allow create, update, delete: if isAdmin();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      // Users can only read their own bookings
      allow read: if isSignedIn() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create bookings for themselves
      allow create: if isSignedIn() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.paymentStatus == 'completed';
      
      // Users can update their own bookings (for cancellation)
      allow update: if isSignedIn() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.status == 'cancelled';
      
      // Only admins can delete bookings
      allow delete: if isAdmin();
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Signed-in users can create reviews
      allow create: if isSignedIn() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users can update their own reviews
      allow update: if isSignedIn() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can delete their own reviews, admins can delete any
      allow delete: if isSignedIn() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
      
      // Only admins/system can create notifications
      allow create: if isAdmin();
      
      // Users can update their own notifications (mark as read)
      allow update: if isSignedIn() && 
                       resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isSignedIn() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // Coupons collection
    match /coupons/{couponId} {
      // Anyone can read active coupons
      allow read: if true;
      
      // Only admins can manage coupons
      allow create, update, delete: if isAdmin();
    }
    
    // Analytics collection (for custom analytics)
    match /analytics/{document=**} {
      // Only admins can read analytics
      allow read: if isAdmin();
      
      // System can write analytics
      allow write: if isSignedIn();
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

